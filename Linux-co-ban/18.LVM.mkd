# LVM (Logical Volume Manager)

## Giới thiệu
Quản lý khối lượng hợp lý, là công nghệ quản lý thiết bị lưu trữ cung cấp cho người dùng sức mạnh để nhóm và trừu tượng bố cục vật lý của thiết bị lưu trữ thành phần để quản trị dễ dàng và linh hoạt hơn. Bằng cách sử dụng khung công tác nhân Linux của trình ánh xạ thiết bị, phép lặp hiện tại, LVM2, có thể được sử dụng để thu thập các thiết bị lưu trữ hiện có thành các nhóm và phân bổ các đơn vị logic từ không gian kết hợp khi cần thiết.
* LVM: là phương pháp cho phép ấn định không gian đĩa cứng thành những logical Volume khiến cho việc thay đổi kích thước trở nên dễ dàng hơn (so với partition). Với kỹ thuật LVM bạn có thể thay đổi kích thước mà không cần sửa lại table của OS. Điều này thật hữu ích với những trường hợp sử dụng hết bộ nhớ còn trống của partition và muốn mở rộng dung lượng của nó.
* Vai trò: 

- Không để hệ thống bị gián đoạn
- Không làm hỏng dịch vụ
- Có thể kết hợp Hot Swapping

* Thành phần trong LVM

Mô hình

![LVM1](images_Linux/LVM1.png)

**Hard drives - Drives**

Thiết bị lưu trữ dữ liệu, ví dụ là `/dev/sda` , `dev/sdb`,...

**Partition**

Partition là các phân vùng của Hard drives, mỗi Hard drives có 4 partition, trong đó partition có 2 loại

- Primary partition: Phân vùng chính, có thể khởi động, mỗi ổ cứng có thể có tối đa 4 phân vùng này.

- Extended partition: phân vùng mở rộng, có thể tao những vùng luân lý.

**Physical Volumes**
Là một gói khác của partition trong kỹ thuật LVM, nó là những thành phần cơ bản được sử dụng bởi LVM. Một Physical Volume không thể mở rộng ra ngoài phạm vi một ổ đĩa.
Có thể kết hợp nhiều Physical Volume thành Volume Groups

**Volume Group**

Nhiều Physical Volume trên những ổ đĩa khác nhau được kết hợp lại thành một Volume Group. Volume group có thể tạo ra các Logical Volume, trong đó người ta có thể tạo, thay đổi kích thước, lưu trữ, gỡ bỏ và sử dụng.

*Lưu ý: Boot loader không thể đọc /boot khi nó nằm trên Logical Volume Group. Do đó không thể sử dụng kỹ thuật LVM với /boot mount point*

**Logical Volume**

Volume Group được chia nhỏ thành nhiều Logical Volume, mỗi Logical Volume có ý nghĩa tương tự như partition. Nó được dùng cho các mount point và được format với những định dạng khác nhau như ext2, ext3, ext4,…

Khi dung lượng của Logical Volume được sử dụng hết ta có thể đưa thêm ổ đĩa mới bổ sung cho Volume Group và do đó tăng được dung lượng của Logical Volume

**File Systems**

- Tổ chức và kiểm soát các tập tin
- Được lưu trữ trên ổ đĩa cho phép truy cập nhanh chóng và an toàn
- Sắp xếp dữ liệu trên đĩa cứng máy tính
- Quản lý vị trí vật lý của mọi thành phần dữ liệu

## Hướng dẫn sử dụng.
### Thêm Disk

* Thêm 1 hoặc một số disk mới vào máy ảo.

![disk](images_Linux/disk1.png)

Ấn save và reboot lại máy ảo

* Kiểm tra ổ disk mới đã được thêm vào hệ thống chưa với lệnh `lsblk`

![disk2](images_Linux/disk2.png)

ổ sdb là ổ mới được thêm vào.

* Tạo và định dạng LVM cho partition trên hard disk sử dụng lệnh `fdisk /dev/sdb`
Ấn m để xem hết tất cả các action có thể thực hiện

![disk3](images_Linux/disk3.png)

Tạo thêm partition mới bằng action `n`, sau đó chọn type `p` là primary, `e` là extended. Ở đây t chọn primary. Sau đó thay đổi định dạng partition bằng lệnh `fdisk /dev/sdb` sau đó chọn command `t` với đối số `8e` để định dạng ổ cứng về dạng `Linux LVM`.

* Tạo không gian vật lý 
Từ các partition đã tạo, sẽ tạo các Physical Volume trên đó bằng lệnh `pvcreate /dev/sdb1`

![disk4](images_Linux/disk4.png)

* Tạo Volume group

Sử dụng lệnh `vgcreate <tên group> /dev/sdb1 /dev/sdc1`
Sử dụng lệnh `vgs` hoặc `vgsdisplay` để kiểm tra lại.

![disk5](images_Linux/disk5.png)

* Tạo Logical Volume
Từ một Volume Group, chúng ta có thể tạo ra các Logical Volume bằng cách sử dụng lệnh:

`lvcreate -L 1G -n NewVolume volume1`

![disk6](images_Linux/disk6.png)

Sử dụng lệnh `lvs` hoặc `lvdisplay` để liệt kê các Logical Volume vừa tạo
* Định dạng Logical Volume vừa tạo
Có thể format các Logical Volume thành các định dạng như ext2, ext3, ext4, ...
```
mkfs.ext2 /dev/volume1/NewVolume
mkfs.ext3 /dev/volume1/NewVolume
mkfs.ext4 /dev/volume1/NewVolume
```

![disk7](images_Linux/disk7.png)

* Mount Logical Volume
Tạo thư mục mkdir /mnt/VolumeLogic1
Mount Logical Volume NewVolume vào thư mục vừa tạo bằng lệnh 
```
mount /dev/volume1/NewVolume /mnt/VolumeLogic1
```
sau đó kiểm tra lại bằng lệnh `df -h`

![disk8](images_Linux/disk8.png)

### Thay đổi dung lượng Logical Volume của LVM

Kiểm tra dung lượng 

![disk9](images_Linux/disk9.png)

Chung ta thấy 1 GB cho NewVolume là không đủ, và `volume1` vẫn còn nhiều dung lượng free, chúng ta có thể thay đổi dung lượng của nó bằng lệnh `lvextend -L +1GB /dev/volume1/NewVolume`
Sau khi tăng kích thước cho Logical Volume, info đã được thay đổi nhưng filesystem chưa thay đổi. Chúng ta cần resize filesystem.
```
resize2fs /dev/volume1/NewVolume
```
![disk10](images_Linux/disk10.png)

Còn đối với việc giảm kích thước Logical Volume
- Trước hết cần unmount logical volume `umount /dev/volume1/NewVolume`
- Tiến hành giảm kích thước của Logical Volume `lvreduce -L 500MB /dev/volume1/NewVolume`
- Format lại Logical Volume `mkfs.ext3 /dev/volume1/NewVolume`
- Mount lại Logical Volume `mount /dev/volume1/NewVolume /mnt/VolumeLogic1`
- df -h : kiểm tra mountpoint và dung lượng của nó.

![disk11](images_Linux/disk11.png)

### Thay đổi dung lượng Volume Group
Đầu tiên, chúng ta thêm một hard disk nữa vào máy ảo và reboot lại để hệ thống nhận thêm disk đó. Thao tác lại các lệnh tạo partition, tạo Physical Volume, Volume Group. 
Sau đó sử dụng lệnh `pvscan` để xem Physical Volume nào đang rảnh.

![disk12](images_Linux/disk12.png)

Ta thấy Physical Volume `dev/sdc1` vừa add vào đang rảnh. Ta muốn thêm `dev/sdc1` vào Volume Group volume1 sử dụng lệnh 
```
vgextend /dev/volume1 /dev/sdc1
```

![disk13](images_Linux/disk13.png)

### Xóa Logical Volume, Volume Group, Physical Volum

* Xóa Logical Volume
    * Trước hết phải unmount Logical Volume

```
umount /dev/volume1/NewVolume
```
Thực hiện xóa 

Logical Volume `lvremove /dev/volume1/NewVolume`

Volume Group `vgremove /dev/volume1`

Physical Volume `pvremove /dev/sdc1`

### Tóm tắt các bước tạo

`fdisk /dev/sdb` : Tạo Partition

`fdisk /dev/sdb` : Chọn định dạng

`pvcreate /dev/sdb1` : Tạo physical volume

`vgcreate Volume_Group dev/sdb1 dev/sdc1` : Tạo Volume Group

`lvcreate -L 1G -n <Logical Volume> <Volume Group>` : Tạo Logical Volume

`mkfs -t ext4 /dev/<Volume Group>/<Logical Volume>` : Định dạng Logical Volume

`mkdir <Thư mục>` : Tạo thư mục để mount vào

`mount /dev/<Volume Group>/<Logical Volume> <Thư mục>` : Mount vào thư mục vừa tạo

## LVM Thin Provisioning

Là tính năng cấp pháp ổ cứng dựa trên sự linh hoạt của LVM. Giả sử ta có một **Volume Group** ta sẽ tạo một **Thin Pool* vừa VG này với dung lượng 20GB cho nhiều khách hàng sử dụng. Giả sử ta có 3 khách hàng, mỗi khách hàng được cấp 6GB lưu trữ. Như vậy ta có 18Gb. Với kỹ thuật truyền thống thì t chỉ có thể cấp phát 2GB cho ng thứ 4.
Nhưng với Thin Provisioning ta vẫn có thể cấp thêm 6Gb nữa cho khách hàng thứ 4. Tức là 6x4=24Gb lớn hơn 4Gb ban đầu. Sở dĩ ta làm được như vậy là do mỗi user tuy được cấp 6Gb nhưng thường thì họ sẽ không dùng hết dung lượng này (nếu hết thì sẽ là Over Provisioning). Nhưng thực tế là khi người dùng sử dụng đến đâu, hệ thống sẽ cấp phát thêm dung lượng đến đó.
Đối với cơ chế cấp phát bình thường thì LVM sẽ cấp phát 1 dãy block liên tục mỗi khi người dùng tạo ra 1 volume mới. Nhưng với cơ chế thin pool thì LVM chỉ cấp phát các block ổ cứng (tập hợp các con trỏ, trỏ tới ổ cứng)khi có dữ liệu thật sự ghi xuống đó. Cách tiếp cận này giúp tiết kiệm dung lượng cho hệ thống, tận dụng tối ưu dung lượng lưu trữ. Tuy nhiên, khuyết điểm là có thể gây phân mảnh hệ thống và gây ra tình trạng Over Provisioning.

* Cách thực hiện

- Tạo Virtual Volume từ các ổ disk
- Tạo Thin Pool (Thực chất là tạo Logical Volume với cờ --thinpool)
- Tạo các Thin Volume (Thực chất là Logical Volume): gồm tạo **filesystem** và **mount point**
- Mở rộng Thin Pool.

Thực hiện

*Tạo Virtual Volume*
```
vgcreate ThaiSonGroup /dev/sdb /dev/sdc
pvg #kiem tra lai volume group
vgs #kiem tra lai volume group
```

*Tạo Thin Pool*
```
lvcreate -l 10G --thinpool "ThaiSonPool" ThaiSonGroup
lvs #kiem tra lai
lvdisplay #kiem tra lai
```

*Tạo các Thin Volumes*
```
lvcreate -V 3G --thin -n "Thin_son1" ThaiSonGroup/ThaiSonPool
lvcreate -V 3G --thin -n "Thin_son2" ThaiSonGroup/ThaiSonPool
lvcreate -V 3G --thin -n "Thin_son3" ThaiSonGroup/ThaiSonPool
lvcreate -V 3G --thin -n "Thin_son4" ThaiSonGroup/ThaiSonPool
```
xuất hiện cảnh bảo khi tổng Thin Volume tạo ra nhiều hơn tổng dung lượng của Thin Pool.

*Format 4 volume về định dạng ext4*
```
mkfs.ext4 /dev/ThaiSonGroup/Thin_son1
mkfs.ext4 /dev/ThaiSonGroup/Thin_son2
mkfs.ext4 /dev/ThaiSonGroup/Thin_son3
mkfs.ext4 /dev/ThaiSonGroup/Thin_son4
```

*Tạo mount point và mount 4 volume vào hệ thống*
```
mkdir -p /mnt/{Thaison1,Thaison2,Thaison3,Thaison4}
mount /dev/ThaiSonGroup/Thin_son1 /mnt/Thaison1
mount /dev/ThaiSonGroup/Thin_son2 /mnt/Thaison2
mount /dev/ThaiSonGroup/Thin_son3 /mnt/Thaison3
mount /dev/ThaiSonGroup/Thin_son4 /mnt/Thaison4
df -h
```

Tham khảm
<https://cloudcraft.info/gioi-thieu-ve-lvm-logical-volume-management/>

## Snapshot LVM
Snapshot LVM là bản sao không gian khả dụng của volume lvm. Nó chỉ hoạt động với LVM và chỉ tiêu thụ dung lượng khi thay đổi được thực hiện đối với không gian logic nguồn thành không gian snapshot. Nếu source volume có một thay đổi lớn được thực hiện với tổng 1GB thì các thay đổi tương tự sẽ được thực hiện  đối với volume snapshot. Trong trường hợp snapshot hết dung lượng, chúng ta có thể sử dụng `lvextend` để phát triển. Và nếu chúng ta cần thu nhỏ snapshot, chúng ta có thể sử dụng `lvreduce`
Nếu vô tình xóa bất cứ tệp nào sau khi tạo Snapshot, ta sẽ không phải lo lắng vì snapshot có tệp gốc ta đã xóa. Snapshot được sử dụng đẻ thực hiện khôi phục nhanh.
Snapshot không thể được sử dụng cho tùy chọn backup. Backup là bản sao chính của một số dữ liệu, vì vậy không thể sử dụng snapshot làm tùy chọn sao lưu.

* Tạo Snapshot
```
lvcreate -L 1GB -s -n <namefilesnapshot> /dev/<volume group>/<không gian cần snapshot>
```
Với các đối số 

`1GB` Kích thước snapshot

`-s` tạo snapshot

`-n` tạo tên

Xóa snapshot
```
lvremove /dev/<volume group>/<không gian snapshot>
```

Kiểm tra lại
```
lvs
```

* Mở rộng
Khi chúng ta cần mở rộng kích thước snapshot trước khi tràn, chúng ta có thể thực hiện bằng cách
```
lvextend -L + 1G / dev /<volume group>/<không gian snapshot>
```
* Khôi phục snapshot hoặc sáp nhập

```
 unmount / mnt / <logical volume> /
```

Khôi phục snap bằng lệnh
```
lvconvert --merge / dev / <volume group> / <logical volume>
```

Sau khi hợp nhất, khối lượng snapshot sẽ tự động bị xóa.

**chú ý** Để mở rộng snapshot tự động, chúng ta có thể thực hiện bằng cách sử dụng sửa đổi trong tệp conf. 
```
vi /etc/lvm/lvm.conf
```
Tìm kiếm `autoextend`, xuất hiện 2 tham chiếu là `autoextend_threshold` và `autoextend_percent`. Với threshold là ngưỡng mở rộng khi snapshot đạt được bao nhiêu phần trăm (mặc định là 100%). Và `percent` là kích thước sẽ mở rộng thêm (mặc định là mở thêm 20% kích thước).